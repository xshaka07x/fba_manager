# scraping/scraper.py

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    NoSuchElementException, TimeoutException, StaleElementReferenceException
)
from webdriver_manager.chrome import ChromeDriverManager
import sys
import os
import signal
import time
import re
import logging
import pytz
import requests
import json
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

sys.stderr = open(os.devnull, "w")  # Cache les erreurs dans un "trou noir"
base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if base_dir not in sys.path:
    sys.path.insert(0, base_dir)

from app import db
from app.models import ProductKeepa
from app.utils.fetch_keepa import get_asin_from_ean, get_keepa_data

# Import du nouveau module Keepa
KEEPA_API_KEY = os.getenv("KEEPA_API_KEY", "ftclrhsi754hf3tblbljldbonk7n4cuthggk8gnt88c4k2sjkmre8th8cjf65jnc")
KEEPA_URL = "https://api.keepa.com/product"

if not KEEPA_API_KEY:
    raise ValueError("‚ùå ERREUR: La cl√© Keepa API n'est pas d√©finie. Configure 'KEEPA_API_KEY' dans vos variables d'environnement.")

# En haut du fichier, apr√®s les imports
logging.getLogger('selenium').setLevel(logging.CRITICAL)
os.environ['WDM_LOG_LEVEL'] = '0'

# ‚öôÔ∏è Configuration Selenium
options = Options()

# Suppression des logs
options.add_argument('--log-level=3')
options.add_experimental_option('excludeSwitches', ['enable-logging'])

# üõë D√©sactiver WebRTC et WebSockets
options.add_argument("--disable-webrtc")
options.add_argument("--disable-features=WebRtcHideLocalIpsWithMdns")
options.add_argument("--force-webrtc-ip-handling-policy=default_public_interface_only")
options.add_argument("--disable-ipv6")
options.add_argument("--disable-web-security")
options.add_argument("--disable-background-networking")

# üöÄ D√©sactiver le GPU et WebGL
options.add_argument("--disable-gpu")
options.add_argument("--disable-software-rasterizer")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-features=VizDisplayCompositor")
options.add_argument("--disable-accelerated-2d-canvas")
options.add_argument("--disable-accelerated-video-decode")
options.add_argument("--disable-accelerated-mjpeg-decode")
options.add_argument("--disable-accelerated-video")
options.add_argument("--disable-gl-drawing-for-tests")
options.add_argument("--disable-webgl")  # D√©sactive WebGL

# üîá Suppression des logs inutiles
options.add_experimental_option("excludeSwitches", ["enable-logging", "enable-automation", "ignore-certificate-errors"])
options.add_experimental_option("useAutomationExtension", False)

# üï∂Ô∏è Mode headless pour √©viter les erreurs graphiques
options.add_argument("--headless=new")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--window-size=1920,1080")  # Taille de fen√™tre fixe
options.add_argument("--start-maximized")  # Maximiser la fen√™tre
options.add_argument("--disable-blink-features=AutomationControlled")  # D√©sactiver la d√©tection d'automatisation

# üéØ Suppression des logs syst√®me
os.environ["WTF_CSRF_ENABLED"] = "False"
os.environ["PYTHONWARNINGS"] = "ignore"
sys.stderr = open(os.devnull, "w")  # Supprime les erreurs
#sys.stdout = open(os.devnull, "w")  # Supprime les logs visibles


def signal_handler(sig, frame):
    print("\nüõë Arr√™t du script demand√©. Fermeture propre de Selenium...")
    try:
        driver.quit()  # Fermer Selenium proprement
    except NameError:
        pass  # Si driver n'existe pas encore, on ignore
    sys.exit(0)  # Quitte proprement le programme

# Capture du signal Ctrl+C
signal.signal(signal.SIGINT, signal_handler)


try:
    from app import create_app, db
except ImportError as e:
    print(f"‚ùå Erreur d'import : {e}")
    print(f"üõ†Ô∏è PYTHONPATH utilis√© : {sys.path}")
    sys.exit(1)


project_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_path not in sys.path:
    sys.path.insert(0, project_path)


def get_db_connection():
    """üìù Retourne une connexion √† la base de donn√©es."""
    return db.session

def insert_or_update_product(nom, ean, prix_retail, url, prix_amazon, difference, profit, sales_estimation):
    """üìù Ins√®re ou met √† jour un produit avec les donn√©es Keepa en DB."""
    try:
        if not ean or ean == "Non disponible":
            return False

        if profit is not None and profit <= 0:
            return False

        # Calcul du ROI
        roi = (profit * 100 / prix_retail) if prix_retail > 0 else 0

        # V√©rification du ROI maximal
        if roi > 800:
            print(f"‚ö†Ô∏è Produit ignor√© (ROI anormalement √©lev√© : {roi}%) | {nom}")
            return False

        paris_timezone = pytz.timezone("Europe/Paris")
        updated_at = datetime.now(paris_timezone)

        # Utilisation de SQLAlchemy au lieu de SQL brut
        existing_product = ProductKeepa.query.filter_by(ean=ean, url=url).first()

        if existing_product:
            existing_product.nom = nom
            existing_product.prix_retail = prix_retail
            existing_product.prix_amazon = prix_amazon
            existing_product.difference = difference
            existing_product.profit = profit
            existing_product.roi = roi
            existing_product.sales_estimation = sales_estimation
            existing_product.updated_at = updated_at
        else:
            new_product = ProductKeepa(
                nom=nom,
                ean=ean,
                prix_retail=prix_retail,
                prix_amazon=prix_amazon,
                difference=difference,
                profit=profit,
                roi=roi,
                url=url,
                sales_estimation=sales_estimation,
                updated_at=updated_at
            )
            db.session.add(new_product)

        db.session.commit()
        return True

    except Exception as e:
        print(f"Erreur lors de l'insertion/mise √† jour du produit : {str(e)}")
        db.session.rollback()
        return False


def set_items_per_page(driver):
    """üìè S√©lectionne 96 produits par page avec gestion des erreurs."""
    try:
        print("‚ö° S√©lection de 96 produits par page...", flush=True)
        select_container = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".size-select .ng-select-container"))
        )
        select_container.click()
        options = WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".size-select div.ng-option"))
        )
        for opt in options:
            if "96 par page" in opt.text:
                opt.click()
                print("‚úÖ Option '96 par page' s√©lectionn√©e.")
                break
    except Exception as e:
        print(f"‚ö†Ô∏è S√©lection 96 produits √©chou√©e : {e}", flush=True)


def scroll_page(driver, max_scrolls=15, wait_time=1):
    """üìú Scroll dynamique avec chargement incr√©mental et v√©rification des produits."""
    print("üîÑ Scroll pour chargement des produits...", flush=True)
    last_height = 0
    no_change_count = 0
    max_no_change = 3  # Nombre maximum de scrolls sans changement avant d'arr√™ter

    for i in range(max_scrolls):
        # Scroll vers le bas
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(wait_time)

        # V√©rification de la hauteur
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            no_change_count += 1
            print(f"‚ö†Ô∏è Scroll {i + 1} - Aucun changement de hauteur ({no_change_count}/{max_no_change})", flush=True)
        else:
            no_change_count = 0
            print(f"‚úÖ Scroll {i + 1} - Nouvelle hauteur: {new_height}", flush=True)

        # V√©rification des produits
        produits_visibles = driver.find_elements(By.CSS_SELECTOR, 'div.col-sx-zento a.format-img-zento')
        print(f"üìà Scroll {i + 1} - Produits visibles : {len(produits_visibles)}", flush=True)

        # Si on a des produits et qu'on n'a pas eu de changement depuis un moment, on arr√™te
        if len(produits_visibles) > 0 and no_change_count >= max_no_change:
            print("‚úÖ Chargement des produits termin√©", flush=True)
            break

        last_height = new_height

    # V√©rification finale
    produits_finaux = driver.find_elements(By.CSS_SELECTOR, 'div.col-sx-zento a.format-img-zento')
    print(f"üéØ Total des produits charg√©s : {len(produits_finaux)}", flush=True)

# La fonction get_keepa_data est import√©e depuis app.utils.fetch_keepa
def extraire_details_produit(driver, url, timeout_sec=5):
    """üîç Extraction des donn√©es produit (nom, prix, EAN, URL)."""
    try:
        # üåç Ouvre le produit dans un nouvel onglet
        driver.execute_script("window.open('');")
        driver.switch_to.window(driver.window_handles[1])
        driver.get(url)

        # ‚è≥ Attente que la page charge
        WebDriverWait(driver, timeout_sec).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))

        # üí∂ Extraction du prix (CSS puis fallback JS)
        try:
            prix_element = WebDriverWait(driver, timeout_sec).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, "div.content-price-zento span.price-value"))
            )
            prix = prix_element.text.strip().replace("\xa0‚Ç¨", "‚Ç¨")
        except TimeoutException:
            prix = driver.execute_script(
                "return document.querySelector('span.price-value') ? document.querySelector('span.price-value').textContent.trim() : 'Non disponible';"
            )

        # üîç Extraction de l'EAN depuis le HTML
        try:
            ean_match = re.search(r'"ean13"\s*:\s*"(\d{13})"', driver.page_source)
            ean_code = ean_match.group(1) if ean_match else "Non disponible"
        except Exception:
            ean_code = "Non disponible"

        print(f"‚úÖ Produit r√©cup√©r√© : {driver.title} | Prix : {prix} | EAN : {ean_code}")

        return {
            'Nom': driver.title,
            'Prix': prix,
            'EAN': ean_code,
            'URL': url
        }

    except Exception:
        print(f"‚ùå Erreur sur {url}, produit ignor√©.")
        return None  

    finally:
        if len(driver.window_handles) > 1:
            driver.close()
            driver.switch_to.window(driver.window_handles[0])






def enregistrer_produit(produit):
    """üíæ Enregistre le produit si non existant en DB."""
    if produit and produit['EAN']:
        insert_or_update_product(
            nom=produit['Nom'],
            ean=produit['EAN'],
            prix_retail=float(produit['Prix'].replace("‚Ç¨", "").strip()),
            url=produit['URL'],
            prix_amazon=0,  # Valeur par d√©faut
            difference=0,  # Valeur par d√©faut
            profit=0,  # Valeur par d√©faut
            sales_estimation=0  # Valeur par d√©faut
        )
        print(f"üíæ [SCRAPER] Produit trait√© pour la DB : {produit['Nom']} | EAN: {produit['EAN']}")
    else:
        print(f"üîÑ Produit {produit.get('Nom', 'Inconnu')} existant ou EAN manquant.")






def scrap_toutes_pages(url_base, nb_produits):
    """üîÑ Scrape toutes les pages jusqu'√† obtenir le nombre de produits souhait√©."""
    produits = []
    eans = []
    urls_traitees = set()
    page = 1
    produits_valides = 0

    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

        while produits_valides < nb_produits:
            driver.get(f"{url_base}?pageNumber-3={page}")
            
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            try:
                WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div.col-sx-zento'))
                )
            except TimeoutException:
                break

            nouveaux_produits, nouveaux_eans, urls_traitees = scrap_produits_sur_page(driver, nb_produits - produits_valides, urls_traitees)
            
            produits.extend(nouveaux_produits)
            eans.extend(nouveaux_eans)
            produits_valides = sum(1 for p in produits if p.get('profit', 0) > 0)
            
            if produits_valides >= nb_produits:
                break
            
            print(f"Page {page} termin√©e, analyse de la page {page + 1}")
            page += 1

        return produits

    except Exception:
        return []
    finally:
        try:
            driver.quit()
        except:
            pass



def ean_existe_deja(ean):
    """üîç V√©rifie si un produit avec cet EAN existe d√©j√† dans la base de donn√©es."""
    try:
        count = db.session.query(ProductKeepa).filter_by(ean=ean).count()
        return count > 0
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la v√©rification de l'EAN {ean} : {e}")
        return False



def scrap_produits_sur_page(driver, nb_max_produits, urls_deja_traitees):
    """üîç Scrape les produits sur la page courante."""
    produits = []
    eans_page_courante = []
    produits_valides = 0

    try:
        elements_produits = driver.find_elements(By.CSS_SELECTOR, 'div.col-sx-zento')
        
        for element in elements_produits:
            if produits_valides >= nb_max_produits:
                return produits, eans_page_courante, urls_deja_traitees

            try:
                lien_produit = element.find_element(By.CSS_SELECTOR, 'a.format-img-zento').get_attribute('href')
                if lien_produit in urls_deja_traitees:
                    continue

                driver.execute_script("window.open('');")
                driver.switch_to.window(driver.window_handles[1])
                driver.get(lien_produit)
                
                try:
                    nom_element = driver.find_element(By.CSS_SELECTOR, 'div.template-grid-whilist h1.green-text')
                    nom_produit = nom_element.text.strip()
                    
                    prix_element = driver.find_element(By.CSS_SELECTOR, 'li.price.price-with-taxes.content-price-detail-zento span.price-value')
                    prix_text = prix_element.text.strip().replace('‚Ç¨', '').replace(',', '.').strip()
                    prix_retail = float(prix_text)
                    
                    product_element = driver.find_element(By.CSS_SELECTOR, '[data-product]')
                    product_data = product_element.get_attribute('data-product')
                    product_json = json.loads(product_data)
                    ean = product_json.get('stock', {}).get('ean13')
                    
                    print(f"Analyse du produit {ean} - {nom_produit}")

                    if not ean:
                        print("‚ùå Non conforme. Produit suivant. (EAN manquant)")
                        driver.close()
                        driver.switch_to.window(driver.window_handles[0])
                        continue
                        
                    if ean_existe_deja(ean):
                        print("üîÑ Produit d√©j√† scann√© pr√©c√©demment.")
                        driver.close()
                        driver.switch_to.window(driver.window_handles[0])
                        continue

                    keepa_data = get_keepa_data(ean, prix_retail)
                    
                    if keepa_data and keepa_data.get('status') == 'OK':
                        prix_amazon = keepa_data.get('prix_amazon')
                        difference = keepa_data.get('difference')
                        profit = keepa_data.get('profit')
                        sales_estimation = keepa_data.get('sales_estimation', 0)
                        is_pl = keepa_data.get('is_pl', False)
                        
                        # Ignorer les Private Labels
                        if is_pl:
                            print(f"‚ùå Produit ignor√© car Private Label: {nom_produit}")
                            driver.close()
                            driver.switch_to.window(driver.window_handles[0])
                            continue

                        # Ignorer les produits avec peu de ventes
                        if sales_estimation <= 1:
                            print(f"‚ùå Produit ignor√© car peu de ventes ({sales_estimation}): {nom_produit}")
                            driver.close()
                            driver.switch_to.window(driver.window_handles[0])
                            continue
                        
                        if all([prix_amazon, difference, profit]):
                            produit = {
                                'nom': nom_produit,
                                'ean': ean,
                                'prix_retail': prix_retail,
                                'prix_amazon': prix_amazon,
                                'difference': difference,
                                'profit': profit,
                                'url': lien_produit,
                                'sales_estimation': sales_estimation
                            }
                            
                            if insert_or_update_product(
                                nom=nom_produit,
                                ean=ean,
                                prix_retail=prix_retail,
                                url=lien_produit,
                                prix_amazon=prix_amazon,
                                difference=difference,
                                profit=profit,
                                sales_estimation=sales_estimation
                            ):
                                print(f"‚úÖ Produit ajout√© - Ventes estim√©es: {sales_estimation}")
                                produits.append(produit)
                                eans_page_courante.append(ean)
                                urls_deja_traitees.add(lien_produit)
                                produits_valides += 1
                        else:
                            print("‚ùå Non conforme. Produit suivant. (Donn√©es Amazon incompl√®tes)")
                    else:
                        print("‚ùå Non conforme. Produit suivant. (ASIN non trouv√©)")
                        
                except Exception:
                    print("‚ùå Non conforme. Produit suivant. (Erreur extraction donn√©es)")
                
                driver.close()
                driver.switch_to.window(driver.window_handles[0])

            except Exception:
                if len(driver.window_handles) > 1:
                    driver.close()
                    driver.switch_to.window(driver.window_handles[0])
                continue
        
        return produits, eans_page_courante, urls_deja_traitees
        
    except Exception:
        return [], [], urls_deja_traitees



def lancer_scraping(url, nb_scrap_total):
    """üöÄ Lancement principal du scraping avec pagination par URL."""
    driver = None
    try:
        print(f"Demarrage du scrap sur {url} pour {nb_scrap_total} produits.")
        url_base = re.sub(r'\?page=\d+', '', url)
        
        try:
            response = requests.get(url_base, timeout=10)
            if response.status_code != 200:
                return []
        except Exception:
            return []

        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        driver.get(url_base)
        time.sleep(5)

        produits_scrapes = scrap_toutes_pages(url_base, nb_scrap_total)
        print(f"{len(produits_scrapes)} produits analys√©s. Analyse termin√©e.")
        return produits_scrapes

    except Exception:
        return []
    finally:
        if driver:
            driver.quit()



if __name__ == "__main__":
    try:
        from app import create_app
        app = create_app()
        
        with app.app_context():
            url = sys.argv[1]
            nb_scrap = int(sys.argv[2])
            lancer_scraping(url, nb_scrap)
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du script : {str(e)}")